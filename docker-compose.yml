services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: vitrin_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: vitrin
      POSTGRES_USER: vitrin_user
      POSTGRES_PASSWORD: vitrin_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../vitrin-backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - vitrin_network

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: vitrin_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - vitrin_network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: vitrin_minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - vitrin_network
    command: server /data --console-address ":9001"

  # Django Backend
  backend:
    build:
      context: ../vitrin-backend
      dockerfile: Dockerfile
    container_name: vitrin_backend
    restart: unless-stopped
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-change-in-production
      - DATABASE_URL=postgresql://vitrin_user:vitrin_password@db:5432/vitrin
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:5173,http://frontend:3000
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET_NAME=vitrin-media
      - MINIO_USE_HTTPS=False
    volumes:
      - ../vitrin-backend:/app
      - media_files:/app/media
      - static_files:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - minio
    networks:
      - vitrin_network
    command: >
      sh -c "python manage.py migrate &&
              python manage.py setup_minio &&
              python manage.py collectstatic --noinput &&
              python manage.py runserver 0.0.0.0:8000"

  # Celery Worker
  celery:
    build:
      context: ../vitrin-backend
      dockerfile: Dockerfile
    container_name: vitrin_celery
    restart: unless-stopped
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-change-in-production
      - DATABASE_URL=postgresql://vitrin_user:vitrin_password@db:5432/vitrin
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ../vitrin-backend:/app
      - media_files:/app/media
    depends_on:
      - db
      - redis
    networks:
      - vitrin_network
    command: celery -A vitrin worker -l info

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ../vitrin-backend
      dockerfile: Dockerfile
    container_name: vitrin_celery_beat
    restart: unless-stopped
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-change-in-production
      - DATABASE_URL=postgresql://vitrin_user:vitrin_password@db:5432/vitrin
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ../vitrin-backend:/app
    depends_on:
      - db
      - redis
    networks:
      - vitrin_network
    command: celery -A vitrin beat -l info

  # React Frontend
  frontend:
    build:
      context: ..
      dockerfile: vitrin-infrastructure/Dockerfile.frontend
    container_name: vitrin_frontend
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://localhost:8000/api
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - vitrin_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vitrin_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_files:/var/www/static
      - media_files:/var/www/media
    depends_on:
      - frontend
      - backend
    networks:
      - vitrin_network

volumes:
  postgres_data:
  media_files:
  static_files:
  minio_data:

networks:
  vitrin_network:
    driver: bridge
